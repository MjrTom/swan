namespace Swan.Data.Schema;

/// <summary>
/// Represents minimal information about a field in a supported database provider.
/// </summary>
public interface IDbColumnSchema : ICloneable
{
    /// <summary>
    /// Gets the column name.
    /// </summary>
    string ColumnName { get; }

    /// <summary>
    /// Gets the column ordinal (column index within the table).
    /// </summary>
    int ColumnOrdinal { get; }

    /// <summary>
    /// Gets -1 if the this property of cannot be determined or is not relevant;
    /// otherwise, 0 or a positive integer that contains the maximum length value.
    /// </summary>
    int ColumnSize { get; }

    /// <summary>
    /// Gets the precision for numeric fields.
    /// </summary>
    int NumericPrecision { get; }

    /// <summary>
    /// Gets the scale for numeric fields.
    /// </summary>
    int NumericScale { get; }

    /// <summary>
    /// Gets the CLR type for the column.
    /// </summary>
    Type DataType { get; }

    /// <summary>
    /// Gets the name of the provider-specific data type.
    /// Contrary to <see cref="ProviderType"/>, this property holds the
    /// name of the data type as specified in the database itself.
    /// </summary>
    string DataTypeName { get; }

    /// <summary>
    /// Gets the name of the provider-specific data type.
    /// This is typically the provider-specific enumeration value
    /// converted into a string. <seealso cref="DbType"/> and <seealso cref="SqlDbType"/>.
    /// </summary>
    string ProviderType { get; }

    /// <summary>
    /// Gets true if the data type of the column is <see cref="string"/> and its <see cref="ColumnSize"/> property is -1. Otherwise, false.
    /// </summary>
    bool IsLong { get; }

    /// <summary>
    /// Gets whether column values accept null values.
    /// </summary>
    bool AllowDBNull { get; }

    /// <summary>
    /// Gets whether the column is an expression, autoincremental, or
    /// automatically generated by the database. In other words,
    /// the field cannot be used with insert or update statements.
    /// </summary>
    bool IsReadOnly { get; }

    /// <summary>
    /// Gets true: No two rows in the DataTable can have the same value in this column.
    /// IsUnique is guaranteed to be true if the column represents a key by itself or if
    /// there is a constraint of type UNIQUE that applies only to this column.
    /// false: The column can contain duplicate values in the DataTable.
    /// The default of this column is false.
    /// </summary>
    bool IsUnique { get; }

    /// <summary>
    /// Gets whether this column is part of the primary key.
    /// </summary>
    bool IsKey { get; }

    /// <summary>
    /// Gets whether the column is automatically incremented.
    /// </summary>
    bool IsAutoIncrement { get; }

    /// <summary>
    /// Gets a value indicating whether this column is an identity primary key.
    /// </summary>
    bool IsIdentity => !AllowDBNull && IsKey && IsAutoIncrement && DataType.TypeInfo().IsNumeric;
}
